import React from 'react';
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Label } from "@/components/ui/label";
import { Input } from "@/components/ui/input";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Checkbox } from "@/components/ui/checkbox";
import { Badge } from "@/components/ui/badge";
import { Filter, Calendar } from "lucide-react";

export default function ExportFilters({ filters, setFilters, products, filteredCount }) {
  const handleFilterChange = (key, value) => {
    setFilters(prev => ({
      ...prev,
      [key]: value
    }));
  };

  const getUniqueValues = (field) => {
    return [...new Set(products.map(p => p[field]).filter(Boolean))];
  };

  return (
    <Card className="shadow-lg border-0 bg-white/90 backdrop-blur-sm">
      <CardHeader>
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-2">
            <Filter className="w-5 h-5 text-gray-600" />
            <CardTitle className="text-xl font-bold text-gray-900">Filtros de Exportação</CardTitle>
          </div>
          <Badge className="bg-green-100 text-green-800 px-3 py-1">
            {filteredCount} produto{filteredCount !== 1 ? 's' : ''}
          </Badge>
        </div>
        <p className="text-gray-600">Configure os filtros para personalizar sua exportação</p>
      </CardHeader>
      <CardContent className="space-y-6">
        {/* Date Range Filter */}
        <div className="space-y-4">
          <div className="flex items-center gap-2">
            <Calendar className="w-4 h-4 text-gray-500" />
            <Label className="font-semibold">Período de Cadastro</Label>
          </div>
          
          <Select 
            value={filters.dateRange} 
            onValueChange={(value) => handleFilterChange('dateRange', value)}
          >
            <SelectTrigger>
              <SelectValue placeholder="Selecione o período" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="all">Todos os períodos</SelectItem>
              <SelectItem value="today">Hoje</SelectItem>
              <SelectItem value="week">Última semana</SelectItem>
              <SelectItem value="month">Este mês</SelectItem>
              <SelectItem value="custom">Período personalizado</SelectItem>
            </SelectContent>
          </Select>

          {filters.dateRange === 'custom' && (
            <div className="grid grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="startDate">Data inicial</Label>
                <Input
                  id="startDate"
                  type="date"
                  value={filters.startDate}
                  onChange={(e) => handleFilterChange('startDate', e.target.value)}
                />
              </div>
              <div className="space-y-2">
                <Label htmlFor="endDate">Data final</Label>
                <Input
                  id="endDate"
                  type="date"
                  value={filters.endDate}
                  onChange={(e) => handleFilterChange('endDate', e.target.value)}
                />
              </div>
            </div>
          )}
        </div>

        {/* Product Filters */}
        <div className="grid md:grid-cols-3 gap-4">
          <div className="space-y-2">
            <Label htmlFor="marca">Marca</Label>
            <Select 
              value={filters.marca} 
              onValueChange={(value) => handleFilterChange('marca', value)}
            >
              <SelectTrigger>
                <SelectValue placeholder="Todas as marcas" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value={null}>Todas as marcas</SelectItem>
                {getUniqueValues('marca').map(marca => (
                  <SelectItem key={marca} value={marca}>{marca}</SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>

          <div className="space-y-2">
            <Label htmlFor="fornecedor">Fornecedor</Label>
            <Select 
              value={filters.fornecedor} 
              onValueChange={(value) => handleFilterChange('fornecedor', value)}
            >
              <SelectTrigger>
                <SelectValue placeholder="Todos os fornecedores" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value={null}>Todos os fornecedores</SelectItem>
                {getUniqueValues('fornecedor').map(fornecedor => (
                  <SelectItem key={fornecedor} value={fornecedor}>{fornecedor}</SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>

          <div className="space-y-2">
            <Label htmlFor="tipo_produto">Tipo de Produto</Label>
            <Select 
              value={filters.tipo_produto} 
              onValueChange={(value) => handleFilterChange('tipo_produto', value)}
            >
              <SelectTrigger>
                <SelectValue placeholder="Todos os tipos" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value={null}>Todos os tipos</SelectItem>
                {getUniqueValues('tipo_produto').map(tipo => (
                  <SelectItem key={tipo} value={tipo}>{tipo}</SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>
        </div>

        {/* Export Options */}
        <div className="space-y-4">
          <Label className="font-semibold">Opções de Exportação</Label>
          
          <div className="space-y-3">
            <div className="flex items-center space-x-2">
              <Checkbox
                id="includeExpired"
                checked={filters.includeExpired}
                onCheckedChange={(checked) => handleFilterChange('includeExpired', checked)}
              />
              <Label htmlFor="includeExpired" className="text-sm font-normal">
                Incluir produtos vencidos
              </Label>
            </div>

            <div className="flex items-center space-x-2">
              <Checkbox
                id="includeObservacoes"
                checked={filters.includeObservacoes}
                onCheckedChange={(checked) => handleFilterChange('includeObservacoes', checked)}
              />
              <Label htmlFor="includeObservacoes" className="text-sm font-normal">
                Incluir campo de observações
              </Label>
            </div>
          </div>
        </div>
      </CardContent>
    </Card>
  );
}